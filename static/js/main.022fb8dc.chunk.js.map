{"version":3,"sources":["components/Tarea.jsx","components/Tareas.jsx","App.js","serviceWorker.js","index.js"],"names":["Tarea","state","displayColorPicker","handleClose","setState","onBtnClickColorPiker","onColorChanged","newColor","props","onChangeColor","data","hex","style","position","className","this","completed","borderRightColor","color","text","onClick","onDelete","onComplete","left","zIndex","top","right","bottom","onChange","Component","Tareas","JSON","parse","localStorage","getItem","tasks","taskText","onTareaTextChanged","bind","handleKeyDown","onClickCompleteTask","onClickDeleteTask","onClickChangeColorTask","event","key","createNewTaskOnTasksArray","target","value","task","arrayTasksModified","map","item","id","saveTasksChanged","filter","console","log","arrayTasks","Date","getTime","saveToLocalStorage","setItem","stringify","tarea","type","placeholder","ev","onKeyDown","onBtnCreateClicked","fillCardsTasks","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.022fb8dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { TwitterPicker } from 'react-color';\r\nimport './Tarea.css';\r\n\r\n\r\nclass Tarea extends Component {\r\n\r\n    state = {\r\n        displayColorPicker: false,\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ displayColorPicker: false })\r\n    };\r\n\r\n    onBtnClickColorPiker = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n    }\r\n\r\n    onColorChanged = (newColor) => {\r\n        this.props.onChangeColor(this.props.data, newColor.hex)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const popover = {\r\n            position: 'absolute',\r\n            left : '200px',\r\n            zIndex: '2',\r\n        }\r\n        const cover = {\r\n            position: 'fixed',\r\n            top: '0px',\r\n            right: '0px',\r\n            bottom: '0px',\r\n            left: '0px',\r\n        }\r\n\r\n        return (\r\n            <div style={{ position: 'relative' }}>\r\n                <div className={`Tarea ${this.props.data.completed ? 'completed' : ''}`} style={{ borderRightColor: this.props.data.color }}>\r\n                    <p className=\"text\">{this.props.data.text}</p>\r\n                    <button className=\"buttonsTasks\" onClick={() => this.props.onDelete(this.props.data)}>Eliminar</button>\r\n                    <button className=\"buttonsTasks\" onClick={() => this.props.onComplete(this.props.data)}>Completar</button>\r\n\r\n                    <button className=\"buttonsTasks\" onClick={this.onBtnClickColorPiker}>Pick Color</button>\r\n                </div>\r\n                \r\n                {this.state.displayColorPicker ?\r\n                    <div style={popover}>\r\n                        <div style={cover} onClick={this.handleClose} />\r\n                        <TwitterPicker onChange={this.onColorChanged} />\r\n                    </div> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tarea;","import React, { Component } from 'react';\r\nimport Tarea from './Tarea';\r\nimport './Tareas.css';\r\n\r\n\r\nclass Tareas extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const INITIAL = {\r\n            tasks: [],\r\n            taskText: \"\",\r\n        };\r\n        this.state = JSON.parse(localStorage.getItem('TareasState')) || INITIAL;\r\n\r\n\r\n        this.onTareaTextChanged = this.onTareaTextChanged.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.onClickCompleteTask = this.onClickCompleteTask.bind(this);\r\n        this.onClickDeleteTask = this.onClickDeleteTask.bind(this);\r\n        this.onClickChangeColorTask = this.onClickChangeColorTask.bind(this);\r\n\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        if (event.key === 'Enter') {\r\n            this.createNewTaskOnTasksArray()\r\n        }\r\n    }\r\n\r\n    onTareaTextChanged(event) {\r\n        this.setState({ taskText: event.target.value })\r\n    }\r\n\r\n    onBtnCreateClicked() {\r\n        this.createNewTaskOnTasksArray()\r\n    }\r\n\r\n\r\n    onClickCompleteTask(task) {\r\n        task.completed = !task.completed;\r\n        let arrayTasksModified = this.state.tasks.map(item => item.id === task.id ? task : item)\r\n        this.saveTasksChanged(arrayTasksModified)\r\n    }\r\n\r\n    onClickDeleteTask(task) {\r\n        let arrayTasksModified = this.state.tasks.filter(item => item.id !== task.id)\r\n        this.saveTasksChanged(arrayTasksModified)\r\n    }\r\n\r\n    onClickChangeColorTask(task, newColor) {\r\n        console.log(task)\r\n        console.log(newColor)\r\n        console.log(this.state.tasks)\r\n\r\n\r\n        task.color = newColor;\r\n        let arrayTasksModified = this.state.tasks.map(item => item.id === task.id ? task : item)\r\n        this.saveTasksChanged(arrayTasksModified)\r\n    }\r\n\r\n    createNewTaskOnTasksArray() {\r\n        if (this.state.taskText === \"\") {\r\n        } else {\r\n            let arrayTasks = this.state.tasks\r\n            let date = new Date()\r\n            let keyTarea = date.getTime()\r\n            arrayTasks = [{\r\n                id: keyTarea,\r\n                text: this.state.taskText,\r\n                completed: false,\r\n                color: \"white\",\r\n            },\r\n            ...arrayTasks]\r\n            this.setState({\r\n                taskText: \"\",\r\n            })\r\n            this.saveTasksChanged(arrayTasks)\r\n        }\r\n    }\r\n\r\n    saveTasksChanged(arrayTasks) {\r\n        this.setState({\r\n            tasks: arrayTasks,\r\n        }, () => {\r\n            this.saveToLocalStorage()\r\n            console.log('in the callback',this.state)\r\n        })\r\n        console.log('after setState run',this.state)\r\n\r\n    }\r\n\r\n    saveToLocalStorage() {\r\n        localStorage.setItem('TareasState', JSON.stringify(this.state));\r\n    }\r\n\r\n\r\n    fillCardsTasks() {\r\n        return this.state.tasks.map(tarea =>\r\n            <Tarea\r\n                key={tarea.id}\r\n                data={tarea}\r\n                onComplete={this.onClickCompleteTask}\r\n                onDelete={this.onClickDeleteTask} \r\n                onChangeColor={this.onClickChangeColorTask} />)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        //onChange={(e) => this.onTareaTextChanged(e)} == {this.onTareaTextChanged}\r\n\r\n        return (\r\n            <div className=\"Tareas\">\r\n                <div>\r\n                    <input\r\n                    className = \"newTaskBar\"\r\n                        type=\"text\"\r\n                        placeholder=\"Cual es tu tarea?\"\r\n                        onChange={(ev) => this.onTareaTextChanged(ev)}\r\n                        onKeyDown={this.handleKeyDown}\r\n                        value={this.state.taskText} />\r\n                    <button className=\"buttonSearch\" onClick={() => this.onBtnCreateClicked()}>Crear</button>\r\n                </div>\r\n                <div className=\"tasksList\">\r\n                    {this.fillCardsTasks()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tareas;","import React from 'react';\nimport './App.css';\nimport Tareas from './components/Tareas.jsx';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Proyecto \"To Do\" con React y componentes de terceros</h2>\n      </header>\n      <Tareas/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}